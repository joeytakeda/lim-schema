<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="all" name="buildLIM">
    <description>
        Build file for creating the schema and documentation from the LiM ODD files.
        
        All submodules must be fetched beforehand.
    </description>
    
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="dataDir" value="${basedir}/../lim-data/data"/>
    <property name="repo" value="sfu-dhil"/>
    <property name="schemaDir" value="${basedir}/schema"/>
    <property name="TEIStylesheets" value="${basedir}/Stylesheets/"/>
    <property name="saxon" value="${lib.dir}/saxon10HE.jar"/>
    

    
    <target name="install">
        <description>target: install
        
        Target to fetch all of the jar files necessary for building things;
        this includes saxon, jing, and the xsl-schematron implementation. We just
        fetch all of those using the xml-validate-action.
        </description>
        <ant antfile="${basedir}/xml-validate-action/build.xml"
            dir="${basedir}"
            target="install">
            <property name="saxon" value="${saxon}"/>
        </ant>
    </target>
    
    
    <target name="fetch">
        <description>Fetches all of the modules and creates one full ODD</description>
        <echo>Fetching modules</echo>
        <java jar="${saxon}" fork="true">
            <arg line="-xsl:${basedir}/code/documentation/xsl/include.xsl"/>
            <arg line="-s:${schemaDir}/lim.odd"/>
            <arg line="-o:${schemaDir}/lim.included.odd"/>
        </java>
    </target>
    
    <target name="populate">
        <description>Populates the ODD with values from taxonomies</description>
        <echo>Populating ODD values from the taxonomies</echo>

        <java jar="${saxon}" fork="true">
            <arg line="-xsl:${basedir}/code/schema/fill_odd.xsl"/>
            <arg line="-s:${schemaDir}/lim.included.odd"/>
            <arg line="-o:${schemaDir}/lim.full.odd"/>
        </java>
        
    </target>
    
    <target name="expand">
        <description>Expands the ODD, combining with P5, 
            using the TEI stylesheets</description>
        <echo>Expanding ODD</echo>
        <java jar="${saxon}" fork="true">
            <arg line="-xsl:${TEIStylesheets}/odds/odd2odd.xsl"/>
            <arg line="-s:${schemaDir}/lim.full.odd"/>
            <arg line="-o:${schemaDir}/lim.expanded.odd"/>
        </java>
    </target>
    
    <target name="rng">
        <description>Creates the RNG from the expanded ODD</description>
        <echo>Building RNG</echo>
        <java jar="${saxon}" fork="true">
            <arg line="-xsl:${TEIStylesheets}/odds/odd2relax.xsl"/>
            <arg line="-s:${schemaDir}/lim.expanded.odd"/>
            <arg line="-o:${schemaDir}/lim.rng"/>
        </java>
     <!--   <!-\-And now adjust the RNG to allow person elements in any order-\->
        <move file="${schemaDir}/lim.rng" tofile="${schemaDir}/lim.rng.tmp"/>
        <java jar="${saxon}" fork="true">
            <arg line="-xsl:${basedir}/code/schema/fix_rng.xsl"/>
            <arg line="-s:${schemaDir}/lim.rng.tmp"/>
            <arg line="-o:${schemaDir}/lim.rng"/>
        </java>-->
    </target>
    

    
    <target name="makeRng" depends="install, fetch, populate, expand, rng">
        <description>
            target: makeRng
            
            Creates the schema using the TEI Stylesheets repository
            (first expanding, and then convert to RelaxNG)
        </description>
    </target>
    
    <target name="checkoutData" if="dataDirIsLocal">
        <delete dir="${dataDir}"/>
        <mkdir dir="${dataDir}"/>
        <exec executable="git">
            <arg line="clone https://github.com/${repo}/lim-data ${dataDir}"/>
        </exec>
    </target>
    
    <target name="createTestDocs">
        <description>
            target: createTestDocs
            
            A simple target to create a test directory that 
            uses the freshly built schema rather than the live one.
        </description>
        <delete dir="test_data"/>
        <mkdir dir="test_data"/>
        <copy todir="test_data">
            <fileset dir="${dataDir}">
                <include name="**/**.xml"/>
            </fileset>
            <filterchain>
                <tokenfilter>
                    <!--Now replace the URI to point to the local version-->
                    <replacestring
                        from="https://github.com/sfu-dhil/lim-schema/releases/latest/download/lim.rng"
                        to="${schemaDir}/lim.rng"/>
                </tokenfilter>
             
            </filterchain>
        </copy>
        <ant antfile="${basedir}/xml-validate-action/build.xml" dir="${basedir}">
            <property name="dir" value="${basedir}/test_data"/>
            <property name="rng" value="${schemaDir}/lim.rng"/>
            <property name="saxon" value="${saxon}"/>
        </ant>
    </target>
    
    <target name="validate">
        <description>
            target: validate
            
            Validates files using the xml-validate-action build;
            this is mostly helpful when rebuilding the schema to make
            sure everything worked the way you wanted it to.
        </description>
        <ant antfile="${basedir}/xml-validate-action/build.xml" dir="${basedir}">
            <property name="dir" value="${dataDir}"/>
            <property name="rng" value="${schemaDir}/lim.rng"/>
            <property name="saxon" value="${saxon}"/>
            <property name="exclude" value="vol11"/>
        </ant>
    </target>
    
    <target name="documentation" depends="install">
        <description>
            target: documentation
            
            Rebuild the documentation using the TEI Stylesheets.
        </description>
        <ant antfile="code/documentation/build.xml" inheritall="false">
            <property name="TEIStylesheets" value="${TEIStylesheets}"/>
            <property name="saxon" value="${saxon}"/>
        </ant>
    </target>
    
   <target name="framework" depends="install">
       <description>
           target: framework
           
           Create the LiM encoding framework
       </description>
       <ant antfile="framework/buildFramework.xml" inheritall="true"/>
   </target>
    
    
  <target name="all" depends="documentation, framework">
      <description>
          target: all
          
          Creates the documentation and framework in one go 
      </description>
      
  </target>
    
    <target name="schema" depends="makeRng, validate">
      <description>
          target: schema
          
          Creates the RelaxNG schema and then validates files against the newly created RelaxNG.
      </description>
  </target>
    
    
</project>
