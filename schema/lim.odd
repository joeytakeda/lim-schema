<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="https://tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="https://tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron"
  xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns="http://www.tei-c.org/ns/1.0"
  xml:lang="en">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Schema and Encoding Guidelines for the <title level="m">Lyon in Mourning</title> Project</title>
        <respStmt>
          <resp>Principle Investigator</resp>
          <name>Leith Davis</name>
        </respStmt>
      </titleStmt>
      <publicationStmt>
        <p>Probably free?</p>
      </publicationStmt>
      <sourceDesc>
        <p>No source; born digital.</p>
      </sourceDesc>
    </fileDesc>
    <encodingDesc>
      <tagsDecl>
        <rendition xml:id="rnd_code">
           font-family: monospace;
        </rendition>
      </tagsDecl>
      <listPrefixDef>
        <prefixDef ident="doc" matchPattern="(.+)(#.+)?" replacementPattern="$1.xml$2">
          <p>Mechanism for pointing to a document in the repository. E.g. <val>doc:vol11_vol1</val>.</p>
        </prefixDef>
        <prefixDef ident="islandora" matchPattern="(\d+)" replacementPattern="https://digital.lib.sfu.ca/islandora/object/lyoninmourning:$1">
          <p>Resolves links to SFU's Islandora collection for the Lyon in Mourning page images.</p>
        </prefixDef>
        <prefixDef ident="lib" matchPattern="(\d+)" replacementPattern="#sfu_pg_$1">
          <p>Resolve links from a page in a volume to a facsimile element.</p>
        </prefixDef>
      </listPrefixDef>
    </encodingDesc>
  </teiHeader>
  <text>
    <front>
      <div>
        <head>Encoding Guidelines</head>
        <p>This document serves as the documentation for <title level="m">The Lyon in Mourning: Networking Jacobites</title> (LiM). At the moment, what follows is a collection of notes to help with planning the project's structure and workflow; as decisions are made and plans are concretized, this document will be updated to reflect the actual encoding principles and guidelines.</p>
      </div>
    </front>
    <body>
<!--     <div>
       <head>Schedule and Plans</head>
       <list rend="ordered">
         <item>Encode the index volume:
          <list>
            <item>Each volume gets its own TEI file</item>
            <item>Each index item is encoded with people and places stored in a shared GDrive spreadsheet</item>
            <item>Once the index is encoded, each index item is converted into its own file in its respective directory</item>
            <item>The spreadsheets are converted into TEI -ography files </item>
          </list>
         
         </item>
         
         
       </list>
     </div>-->
      <div>
        <head>Helpful Links</head>
        <list>
          <item><ref target="https://digital.lib.sfu.ca/lyoninmourning-collection/lyon-mourning">Lyon in Mourning facsimiles (SFU)</ref></item>
          <item><ref target="https://docs.github.com/en/desktop">GitHub Desktop Documentation</ref></item>
          
          <item><ref target="https://tei-c.org/guidelines/">TEI Guidelines</ref></item>
          
          <item>Volume 1:
            <list>
              <item><ref target="https://www.gutenberg.org/files/43222/43222-h/43222-h.htm">Project Gutenberg</ref></item>
              <item><ref target="https://view.nls.uk/mirador/125649979">NLS</ref></item>
            </list>
          
          </item>
        </list>
        <divGen xml:id="helpful_links_facs"/>
        
      </div>
      <div>
        <head>Getting Started</head>
        <div>
          <head>Setting up</head>
          <p>Before working on the LiM documents, there are two pieces of software you will need to install: oXygen XML Editor and Github Desktop. You will also need a Github account.</p>
          <list type="instructions">
            <item>Provide the DHIL with your GitHub account username. If you do not have a GitHub account, you can create a free account here: <ptr target="https://github.com/join"/>.</item>
            <item>Download and install oXygen:  <ptr target="https://www.oxygenxml.com/xml_editor/download_oxygenxml_editor.html"/>. Members of the LiM team should contact the DHIL regarding license keys.</item>
            <item>Download and install the GitHub desktop client: <ptr target="https://desktop.github.com/"/></item>
          </list>
        </div>
        <div>
          <head>Setting up oXygen</head>
          <div>
            <head>Using the Project File</head>
            <list>
              <item>Open oXygen</item>
              <item>If this is your first time opening oXygen, you can close most of the panes on the right-hand and bottom side of your editor window. Make sure, however, that you retain the <term>Project</term> pane.</item>
              <item>In the toolbar, click <code>Project/Open Project</code> and navigate the <code>lim-data</code> directory.</item>
              <item>Open the <code>lim-schema.xpr</code> file and accept the popup notification from oXygen.</item>
            </list>
          </div>
          <div>
            <head>Installing the LiM Encoding Tools/Schemas/Framework</head>
             <list>
               <item>In the toolbar, click <code>Help/Install New Add Ons</code>:
                 <graphic url="images/install-addons.png">
                   <desc>Install add on</desc>
                 </graphic>
   
                 
               </item>
               <item>In the text box, paste the following URL:<lb/>
               <code>https://github.com/sfu-dhil/lim-schema/releases/latest/download/updateSite.xml</code>
                 <graphic url="images/select-addon.png">
                   <desc>Install add on</desc>
                 </graphic>
               </item>
                <item>Accept all of the notifications</item>
              <item>Restart oXygen</item>               
             </list>
          </div>
        </div>
      </div>
      
      <div>
        <head>GitHub Workflow</head>
        <div>
          <head>Committing Changes</head>
          <p>Instructions for committing changes</p>
        </div>
        <div>
          <head>Pushing Changes</head>
          <p>Instructions for pushing changes to the </p>
        </div>
        <div>
          <head>Updating Your Local Copy</head>
        </div>
      </div>
      <div>
        <head>Encoding the Index Volume (Volume 11)</head>
            <p>As the volume 11 contains the index for the other 10 volumes, the encoding for volume 11 is slightly different from a standard TEI encoding framework. The folder structure looks like so:
              <list>
                <item>vol11/
                  <list>
                    <item>vol11.xml</item>
                    <item>vol11_vol1.xml</item>
                    <item>vol11_vol2.xml</item>
                    <item>vol11_vol3.xml</item>
                    <item>[...]</item>
                  </list>
                </item>
              </list>
            </p>
            <p>The <code>vol11.xml</code> file contains all of the metadata for volume 11, but does not contain the transcription for the volume. Instead, each volume its own <term>fragment file</term> that contains the transcription for that volume's section within the index. This is mostly for convience: splitting the files this way makes it easier for multiple encoders to work on the index at the same time. Note that these fragment files do not begin with the standard <gi>TEI</gi> element, but instead use a special type of <gi>div</gi> (<gi>div</gi>/<att>type</att>="<val>index</val>") that contains the transcription for that section of the index. Each file will look something like this:       
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <div type="index" xml:id="vol11_vol1">
                  <!--[...]-->
                </div>
              </egXML>
            </p>
        <div>
          <head>Encoding pages</head>
          <p>Use a self-closing (i.e. empty) <gi>pb</gi> element to denote the <emph>start</emph> of a new <emph>physical</emph> page in the manuscript. In most cases, the <gi>pb</gi> element should go exactly where it happens in flow of the text.</p>
          
          <p>As an example, let's look at these four pages of the introduction from volume 11:
            <figure>
              <graphic url="images/vol11_pg3.png"/>
              <figDesc><ref target="https://digital.lib.sfu.ca/lyoninmourning-2642/%E2%80%98lyon-mourning%E2%80%99-bishop-robert-forbess-collection-jacobite-papers-index-volume">Volume 11, page 3.</ref></figDesc>
              
            </figure>
            <figure>
              <graphic url="images/vol11_pg4.png"/>
              <figDesc>
                <ref target="https://digital.lib.sfu.ca/lyoninmourning-2641/%E2%80%98lyon-mourning%E2%80%99-bishop-robert-forbess-collection-jacobite-papers-index-volume">Volume 11, page 4.</ref>
              </figDesc>
            </figure></p>
          <p>While there are two <emph>digitized</emph> images, the encoding for the above should contain four <gi>pb</gi> elements, one for each of:
            <list>
              <item>the blank verso page</item>
              <item>the recto page</item>
              <item>the blank verso page</item>
              <item>the recto page</item>
            </list>
Since the first paragraph of text extends across the page boundary, we place the <gi>pb</gi> within the middle of the paragraph:
            
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
              <pb facs="lib:3"/>
              <pb facs="lib:3"/>
              <div type="preface">
                <lb/>
                <opener>
                  <salute>Dear <persName>Mr. Blank</persName>,</salute>
                </opener>
                <lb/>
                <p>I have at rescued
                  <lb/> the <title level="m">Index to the Lion in Mourning</title> from
                  <lb/>my father's hands where it has lain
                  <lb/> <!--[....]-->
                  <lb/>Chambers thirteen years ago. You may
                  <pb facs="lib:4"/>
                  <pb facs="lib:4"/>
                  <fw type="pageNum" place="right">2</fw>
                  <lb/>therefore submit the matter to the 
                  <lb/>Curators whenever you choose.</p>
              </div>
            </egXML>
          </p>
          <p>There are a few things to note here:
          <list>
            <item>Each line of text is denoted by using the <gi>lb</gi> (line beginning) element. Like the <gi>pb</gi> element, the <gi>lb</gi> element is self-closing and denotes the <emph>beginning</emph> of a line.</item>
            <item>Each <gi>pb</gi> element also has a <att>facs</att> attribute that denotes the <emph>SFU Library page number</emph> by using the special <val>lib:</val> prefix. The <att>facs</att> attribute, in other words, provides a mechanism for aligning the transcription with the digital images housed at SFU library.</item>
            <item>We encode the written page number using the <gi>fw</gi> (formework) element with an <att>type</att> value of <val>pageNum</val> and an <att>place</att> value of <val>right</val>.</item>
          </list>
          </p>
        </div>
        
        <div>
          <head>Encoding the Indexes</head>
          <p>Each indexed volume has a separate file that will house your transcription. These are a bit strange compared to the rest of the documents; they begin with a <gi>div</gi> element, rather than a <gi>TEI</gi> (this is because these aren't distinct documents, but rather fragments all contained with one document).</p>
          <p>Each volume's index can be considered as a single <gi>list</gi> with each letter, narrative, etc found in the manuscript as a separate <gi>item</gi> in that list:
          <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <div type="index" xml:id="vol11_vol1">
              <pb facs="lib:9"/>
              <fw type="pageNum" place="left">1</fw>
              <fw type="pageNum" place="right">3</fw>
              <list>
                <item><!--The first item--></item>
                <item><!--The second item--></item>
                <!--....-->
              </list>
            </div>
          </egXML>
          Like above, these documents should contain all of the bibliographic information for the document (i.e. page beginnings [<gi>pb</gi>], page numbers and other formeworks [<gi>fw</gi>], etc).
          </p>
          
          <div>
            <head>Index Items</head>
            <div>
              <head>Basic Structure</head>
              <p>Within the <gi>list</gi>, encode each item as a separate <gi>item</gi> that contains the title of the piece and a page number, encoded using the <gi>title</gi> and <gi>num</gi> tag, respectively:
                
                <egXML xmlns="http://www.tei-c.org/ns/Examples">
                  <list>
                    <item>
                      <!--Encoding of the title simplified for demonstrative purposes...-->
                      <title>Letter from the Revt. Mr. Lyon to his mother + Sisters</title>
                      <num>1</num>
                    </item>
                  </list>
                </egXML>
                Note that we do not encode information about the separating line between the page number and the title.
              </p>
            </div>
            <div>
              <head>Marginalia in Index Items</head>
              <p>Some of the index items will have marginal marks or annotations associated with that item that we want to capture. To do so, encode the note text using <gi>note</gi> element with an <att>place</att> to signal the note's position. The <gi>note</gi> element should be contained within the <gi>item</gi> with which it is associated. For example: this item from volume 11:
                
                <figure>
                  <graphic url="images/item_with_note.png">
                    <desc>From volume 11; item with note.</desc>
                  </graphic>
                </figure>
                
                is encoded like so: 
                
                
                <egXML xmlns="http://www.tei-c.org/ns/Examples">
                  <item>
                    <note place="left">v</note>
                    <title>Speech of Mr. Theodore Deacon</title>
                    <num>37</num>
                  </item>
                </egXML>
              </p>
            </div>
          </div>
          
        </div>
        
      </div>
      <div>
        <head>Abbrevations and Corrections</head>
        <p></p>
      </div>
        <div>
          <head>People/Places/Organizations</head>
          <p>TODO: Determine how to encode people/places/organizations. VIAF? Geonames?</p>
        </div>
        <div>
          <head>Emendations, Marginalia, and other Annotations</head>
          <p>Instructions for encoding notes, labels, annotations, as well as deletions, additions.</p>
        </div>
        <div>
          <head>Editorial Decisions and Uncertainty</head>
          <p>How to add editorial notes, uncertainty, supplied, gaps.</p>
        </div>
     
    </body>
    <back>
      <div>
        <head>Appendix</head>
        <schemaSpec ident="lim" start="TEI div person">
          
          <!--CORE-->
          <moduleRef key="core" include="abbr author bibl choice corr date del desc divGen editor emph expan foreign gap gloss graphic head hi imprint item l label lb lg list listBibl mentioned milestone name note num orig p pb ptr pubPlace publisher quote ref reg resp respStmt rs sic term title unclear"/>
          
          <elementSpec ident="pb" module="core" mode="change">
              <classes mode="change">
                <memberOf key="att.global" mode="delete"/>
                <memberOf key="att.typed" mode="delete"/>
                <memberOf key="att.global.facs" mode="add"/>
              </classes>
              <attList>
                <!--Make @facs required-->
                <attDef ident="facs" mode="change" usage="req"/>
              </attList>
          </elementSpec>
          
          <elementSpec ident="rs" module="core" mode="change">
            <attList>
              <attDef ident="type" mode="change" usage="req">
                <valList mode="change">
                  <valItem mode="add" ident="person">
                    <gloss>person</gloss>
                    <desc>An indirect reference to a person (e.g. "his father"); use &lt;persName&gt; for direct references (i.e. "John Smith").</desc>
                  </valItem>
                  <valItem mode="add" ident="event">
                    <gloss>event</gloss>
                    <desc>An indirect reference to an event (e.g. "the day"); use &lt;name type="event"&gt; for direct references to events.</desc>
                  </valItem>
                  <valItem mode="add" ident="place">
                    <gloss>place</gloss>
                    <desc>An indirect reference to a place (e.g. "over there"); use &lt;placeName&gt; for direct references to places (i.e. "Edinburgh").</desc>
                  </valItem>
                </valList>
              </attDef>
            </attList>
          </elementSpec>
          
          <elementSpec ident="note" module="core" mode="change">
            <classes mode="change">
              <memberOf key="att.pointer" mode="delete"/>
            </classes>
            <constraintSpec ident="note.co-occurence" scheme="schematron">
              <desc>Various co-occurence constraints</desc>
              <constraint>
                <sch:pattern>
                  <sch:rule context="tei:note[@type='marginalia']">
                    <sch:assert test="@place">ERROR: All marginalia must have an @place.</sch:assert>
                  </sch:rule>
                </sch:pattern>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="note.mustHaveTypeInText" scheme="schematron">
              <desc>Notes must be typed in the body</desc>
              <constraint>
                <sch:pattern>
                  <sch:rule context="tei:note[ancestor::tei:text]">
                    <sch:assert test="@type">ERROR: All notes in transcriptions must have a @type.</sch:assert>
                  </sch:rule>
                </sch:pattern>
              </constraint>
            </constraintSpec>
              <attList>
                <attDef ident="type" mode="change" usage="opt">
                  <valList type="closed">
                    <valItem ident="editorial">
                      <gloss>editorial note</gloss>
                      <desc>An editorial note written by a team member.</desc>
                    </valItem>
                    <valItem ident="marginalia">
                      <gloss>marginalia</gloss>
                      <desc>A note that's not a footnote, but is some sort of marginal note.</desc>
                    </valItem>
                  </valList>
                </attDef>
              </attList>
          </elementSpec>
          
          
          
          <!--Not sure we need anything from corpus: check proposal-->
          <!--<moduleRef key="corpus"/>-->
          <!--Adding a lot of GAIJI module stuff, since I imagine we'll be
          dealing with some unfamiliar characters?-->
<!--          <moduleRef key="gaiji" include="char charDecl charName charProp g glyph glyphName mapping unicodeName unicodeProp"/>-->
          
          <!--Add quite a few of the header elements, but we may need more-->
          <moduleRef key="header" include="abstract catDesc catRef category change correspAction correspContext correspDesc encodingDesc fileDesc handNote idno listChange listPrefixDef notesStmt prefixDef profileDesc projectDesc publicationStmt rendition revisionDesc sourceDesc tagsDecl taxonomy teiHeader textClass titleStmt"/>
          


          <moduleRef key="linking" include="linkGrp ptr"/>
          
          <!--We may need some components from msdescription, but it depends-->
          <!--<moduleRef key="msdescription"/>-->

          
          <moduleRef key="namesdates" include="addName birth death faith floruit forename genName langKnowledge langKnown listOrg listPerson listPlace location nameLink nationality occupation org orgName persName person persona place placeName residence roleName surname"/>


          <moduleRef key="tei"/>
          
          <classSpec ident="att.anchoring" type="atts" module="tei"
            mode="change">
            <attList>
              <attDef ident="targetEnd" mode="delete"/>
            </attList>
          </classSpec>
          <classSpec ident="att.breaking" type="atts" module="tei" 
            mode="delete"/>
          <classSpec ident="att.canonical" type="atts" module="tei"
            mode="change">
            <attList>
              <attDef ident="key" mode="delete"/>
            </attList>
          </classSpec>
          <classSpec ident="att.coordinated" type="atts" module="tei"
            mode="delete"/>
          <classSpec ident="att.cReferencing" module="tei" type="atts"
            mode="delete"/>
          <classSpec ident="att.damaged" type="atts" module="tei"
            mode="change">
            <attList>
              <attDef ident="group" mode="delete"/>
            </attList>
          </classSpec>
          <classSpec ident="att.datable.iso" module="tei" type="atts"
            mode="delete"/>
          <classSpec ident="att.declarable" module="tei" type="atts"
            mode="delete"/>
          <classSpec ident="att.divLike" module="tei" type="atts"
            mode="delete"/>
          <classSpec ident="att.edition" module="tei" type="atts"
            mode="delete"/>
          <classSpec ident="att.editLike" module="tei" type="atts"
            mode="change">
            <attList>
              <attDef ident="instant" mode="delete"/>
            </attList>
          </classSpec>
          <classSpec type="atts" ident="att.global.facs" mode="change">
            <!--Restrict the use of @facs to only allow lib:-->
            <attList>
              <attDef ident="facs" mode="change">
                <datatype maxOccurs="1">
                  <dataRef name="token" restriction="lib:\d+"/>
                </datatype>
              </attDef>
            </attList>
            <remarks>
              <p>The facs attribute should contain only a single pointer of the form lib:\d+ (i.e. lib: followed by 1 or more digit).</p>
            </remarks>
          </classSpec>
          <classSpec ident="att.global" module="tei" type="atts"
            mode="change">
            <classes mode="change">
              <!--Remove facs and responsibility from the global modules,
                so we can add them on the individual elements that we need-->
              <memberOf key="att.global.facs" mode="delete"/>
              <memberOf key="att.global.responsibility" mode="delete"/>
            </classes>
            <attList>
              <!--We'll never need space or base, afaik-->
              <attDef ident="xml:space" mode="delete"/>
              <attDef ident="xml:base" mode="delete"/>
            </attList>
          </classSpec>
          <!--Remove change everywhere-->
          <classSpec ident="att.global.change" module="transcr" type="atts"
            mode="delete" />
          <!--Remove linking (though we may need some of them, like @corresp)-->
          <classSpec ident="att.global.linking" module="linking" type="atts"
            mode="delete"/>
          <classSpec ident="att.global.rendition" module="tei" type="atts"
            mode="change">
            <attList>
              <!--Delete @rend, since it's too ambiguous to be useful-->
              <attDef ident="rend" mode="delete"/>
              <!--Delete style unless we think that's important-->
              <attDef ident="style" mode="delete"/>
              <!--And constraint rendition-->
              <attDef ident="rendition" mode="change">
                <valList type="closed" mode="add">
                  <valItem ident="rnd:super">
                    <desc>superscript</desc>
                    <gloss>superscript</gloss>
                  </valItem>
                  <valItem ident="rnd:sub">
                    <desc>subscript</desc>
                    <gloss>subscript</gloss>
                  </valItem>
                  <valItem ident="rnd:underlined">
                    <gloss>underlined</gloss>
                    <desc>underlined (NOTE: This should be used almost exclusively with emph or title)</desc>
                  </valItem>
                </valList>
              </attDef>
            </attList>
          </classSpec>
          <classSpec ident="att.naming" module="tei" type="atts"
          mode="change">
            <attList>
              <attDef ident="nymRef" mode="delete"/>
            </attList>
          </classSpec>
          <classSpec ident="att.notated" module="tei" type="atts"
            mode="delete"/>
          <classSpec ident="att.personal" module="tei" type="atts"
            mode="delete"/>
          <classSpec ident="att.placement" module="tei" type="atts"
            mode="change">
            <attList>
              <attDef ident="place" mode="change">
                <valList type="closed" mode="replace">
                  <valItem ident="left" mode="add">
                    <gloss>left</gloss>
                    <desc>in the left margin</desc>
                  </valItem>
                  <valItem ident="right" mode="add">
                    <gloss>right</gloss>
                    <desc>in the right margin</desc>
                  </valItem>
                  <valItem ident="above" mode="add">
                    <gloss>above</gloss>
                    <desc>above the line</desc>
                  </valItem>
                  <valItem ident="below" mode="add">
                    <gloss>below</gloss>
                    <desc>below the line</desc>
                  </valItem>
                </valList>
              </attDef>
            </attList>
          </classSpec>
          <classSpec ident="att.pointing" module="tei" type="atts"
            mode="change">
            <attList>
              <attDef ident="targetLang" mode="delete"/>
              <attDef ident="evaluate" mode="delete"/>
            </attList>
          </classSpec>
          <classSpec ident="att.pointing.group" mode="delete"
            module="tei" type="atts"/>
          <!--Remove spanning-->
          <classSpec ident="att.spanning" module="tei" type="atts"
            mode="delete"/>
          <classSpec ident="att.sortable" module="tei" type="atts"
            mode="delete"/>
          <classSpec ident="att.timed" module="tei" type="atts"
            mode="delete"/>
          <classSpec ident="att.transcriptional"
            module="tei" type="atts"
            mode="delete"/>
          

          
          
          <!-- TEXTSTRUCTURE -->
          <moduleRef key="textstructure"
            include="TEI body byline closer dateline div docAuthor docDate docEdition docImprint docTitle epigraph front imprimatur opener postscript salute signed titlePage titlePart text trailer"/>
          
          <elementSpec ident="div" mode="change" module="textstructure">
            <constraintSpec ident="div.onlyRootWithIndexAndVolume11" scheme="schematron" mode="add">
                <desc>Only index divs are allowed as a root div element and only for vol 11.</desc>
                <constraint>
                  <sch:pattern>
                    <sch:rule context="/tei:div">
                      <sch:assert test="@type = 'index'">ERROR: Only divisions with @type='index' are allowed
                      as root elements.</sch:assert>
                      <sch:assert test="matches($uri,'vol11_')">ERROR: Only use root divs for volume 11.</sch:assert>
                    </sch:rule>
                  </sch:pattern>
                </constraint>
            </constraintSpec> 
              <attList>
                <attDef ident="type" mode="change">
                    <valList mode="add" type="closed">
                      <valItem ident="index">
                        <gloss>index</gloss>
                        <desc>An index/table of contents for a single volume.</desc>
                      </valItem>
                      <valItem ident="preface">
                        <gloss>preface</gloss>
                        <desc>A preface or some prefatory matter to a volume or text.</desc>
                      </valItem>
                    </valList>
                </attDef>
              </attList>
          </elementSpec>
          
          <elementSpec ident="item" mode="change" module="textstructure">
            <constraintSpec ident="item.indexItemsMustHaveTitleAndNum" scheme="schematron" mode="add">
              <desc>All index items must contain a title and a number</desc>
              <constraint>
                <sch:pattern>
                  <sch:rule context="tei:div[@type='index']/tei:list/tei:item">
                    <sch:assert test="count(tei:num) = 1">ERROR: All index items must contain one num element.</sch:assert>
                    <sch:assert test="count(tei:title) = 1">ERROR: All index items must contain one title element.</sch:assert>
                  </sch:rule>
                </sch:pattern>
              </constraint>
            </constraintSpec>
            
          </elementSpec>
          
          
          
          <moduleRef key="transcr"
            include="damage facsimile fw handNotes handShift supplied surface surfaceGrp zone"/>
          <elementSpec ident="fw" module="transcr" mode="change">
            <constraintSpec ident="fw.pageNum.mustHavePlace" scheme="schematron">
              <desc>All pageNum formeworks must have an @place</desc>
              <constraint>
                <sch:pattern>
                  <sch:rule context="tei:fw[@type=('pageNum', 'folioNum')]">
                    <sch:assert test="@place">ERROR: Missing required @place attribute for page number formework.</sch:assert>
                  </sch:rule>
                </sch:pattern>
              </constraint>
            </constraintSpec>
            <attList>
              <attDef ident="type" mode="change" usage="req">
                <valList mode="add" type="closed">
                  <valItem ident="pageNum">
                    <gloss>page number</gloss>
                    <desc>A page number, usually written on the top left or right hand sides of a page.</desc>
                  </valItem>
                  <valItem ident="catchword">
                    <gloss>catchword</gloss>
                    <desc>A catchword, usually on the bottom right of the page.</desc>
                  </valItem>
                  <valItem ident="sig">
                    <gloss>signature</gloss>
                    <desc>A page signature, usually on the bottom center of the page.</desc>
                  </valItem>
                  <valItem ident="folioNum">
                    <gloss>folio number</gloss>
                    <desc>A folio number, usually written on the top left or right hand sides of a page.</desc>
                  </valItem>
                </valList>
              </attDef>
            </attList>
            
          </elementSpec>
          
          
          <!--Global variables for constraints-->
          <constraintSpec scheme="schematron" ident="global.variables">
            <desc>Global variables for use across the schematron.</desc>
            <constraint>
              <sch:pattern>
                <sch:let name="id" value="/tei:*/@xml:id"/>
                <sch:let name="uri" value="document-uri(/)"/>
                <sch:let name="basename" value="tokenize($uri,'[/\\\.]')[last() - 1]"/>
               <!-- <sch:let name="pd" value="replace($uri,'^(.+[/\\]lim-tei[\\/]).+$', '$1')"/>
                <sch:let name="dataDir" value="replace($pd,'(.+(.))$','$1data$2')"/>
                <sch:let name="glyphs"
                  value="document($dataDir || 'glyphs.xml')//tei:glyph[@xml:id]"/> -->
                
              </sch:pattern>
     
            </constraint>
          </constraintSpec>
          
          <!--GLOBAL CONSTRAINTS-->
          <constraintSpec scheme="schematron" ident="global.rootIdMustMatchDocument">
            <desc>The rootid must be the same as the document's name.</desc>
            <constraint>
              <sch:pattern>
                <sch:rule context="/tei:*">
                  <sch:assert test="$basename = $id">
                    ERROR: Document's @xml:id (<sch:value-of select="$id"/>) must match the document's base filename
                    (<sch:value-of select="$basename"/>)
                  </sch:assert>
                </sch:rule>
              </sch:pattern>
            </constraint>
          </constraintSpec>
          
          <constraintSpec scheme="schematron" ident="inlineElementsNoSpaces">
            <desc>Inline elements should not begin or end with spaces.</desc>
            <constraint>
              <sch:pattern>
                <sch:rule context="tei:title | tei:num | tei:ref | tei:rs | tei:placeName | tei:persName">
                  <sch:let name="text" value="string(.)"/>
                  <sch:assert test="not(matches($text, '^\s+|\s+$'))">
                    ERROR: <sch:name/> should not begin or end with spaces.
                  </sch:assert>
                </sch:rule>
              </sch:pattern>
            </constraint>
          </constraintSpec>
        </schemaSpec>
      </div>
    </back>
  </text>
</TEI>
