<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="https://tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="https://tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0"
     xmlns:sch="http://purl.oclc.org/dsdl/schematron"
     xml:id="header">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <title>LiM Schema: header</title>
         </titleStmt>
         <publicationStmt>
            <p>See lim.odd</p>
         </publicationStmt>
         <sourceDesc>
            <p>Born Digital.</p>
         </sourceDesc>
      </fileDesc>
   </teiHeader>
   <text>
      <body>
         <div>
            <head>header</head>
            <schemaSpec ident="lim_header">
               <moduleRef key="header"
                          include="abstract catDesc catRef category change correspAction correspContext correspDesc creation encodingDesc extent fileDesc handNote idno langUsage language listChange listPrefixDef notesStmt prefixDef profileDesc projectDesc publicationStmt rendition revisionDesc sourceDesc tagsDecl taxonomy teiHeader textClass titleStmt"/>
               <!--change-->
               <elementSpec ident="change" mode="change" module="header">
                  <constraintSpec ident="changeMustPointToTeam" scheme="schematron">
                     <constraint>
                        <sch:pattern>
                           <sch:rule context="tei:change">
                              <sch:assert test="every $ptr in tokenize(@who,'\s+') satisfies matches($ptr,'^team:')">
                                 ERROR: Every pointer in change/@who must start with 'team:'.
                              </sch:assert>
                           </sch:rule>
                        </sch:pattern>
                     </constraint>
                  </constraintSpec>
                  <constraintSpec ident="changeMustHaveContent" scheme="schematron">
                     <constraint>
                        <sch:pattern>
                           <sch:rule context="tei:change">
                              <sch:assert test="not(normalize-space(string-join(descendant::text(),'')) = '')">
                                 ERROR: change elements must contain meaningful content.
                              </sch:assert>
                           </sch:rule>
                        </sch:pattern>
                     </constraint>
                  </constraintSpec>
                  <attList>
                     <attDef ident="who" mode="change" usage="req"/>
                     <attDef ident="when" mode="change" usage="req"/>
                  </attList>
               </elementSpec>
               <!--correspAction-->
               <elementSpec ident="correspAction" module="header" mode="change">
                  <classes mode="change">
                     <memberOf key="att.datable" mode="add"/>
                     <memberOf key="lim.att.locatable" mode="add"/>
                     <memberOf key="att.ascribed" mode="add"/>
                  </classes>
                  <content>
                     <!--Allow for empty content-->
                     <alternate>
                        <classRef key="model.correspActionPart" minOccurs="0" maxOccurs="unbounded"/>
                        <classRef key="model.pLike" minOccurs="0" maxOccurs="unbounded"/>
                     </alternate>
                  </content>
               </elementSpec>
               <!--creation-->
               <elementSpec ident="creation" module="header" mode="change">
                  <content>
                     <sequence>
                        <elementRef key="placeName" minOccurs="0" maxOccurs="1"/>
                        <elementRef key="date" minOccurs="0" maxOccurs="1"/>
                        <elementRef key="note" minOccurs="0" maxOccurs="1"/>
                     </sequence>
                  </content>
                  <constraintSpec ident="onlyUseCreationForAccountsNarratives" scheme="schematron">
                     <constraint>
                        <sch:pattern>
                           <sch:rule context="tei:creation">
                              <sch:assert test="ancestor::tei:profileDesc/tei:limItem[@type=                                  ('accountNarrative','conversation','misc', 'speech')]">ERROR: The creation element should only be used for account/narratives, conversations, and speeches, since the date/place of the transcription may differ from the setting.</sch:assert>
                              <sch:assert test="count(tei:*) gt 0">ERROR: The creation element requires at least one of placeName, date, or note.</sch:assert>
                           </sch:rule>
                           
                        </sch:pattern>
                        
                     </constraint>
                  </constraintSpec>
               </elementSpec>
               <!--langUsage-->
               <elementSpec ident="langUsage" module="header" mode="change">
                  <content>
                     <elementRef key="language" minOccurs="1" maxOccurs="unbounded"/>
                  </content>
               </elementSpec>
               <!--profileDesc-->
               <elementSpec ident="profileDesc" module="header" mode="change">
                  <content>
                     <alternate>
                        <sequence>
                           <alternate>
                              <sequence>
                                 <elementRef key="locusGrp"/>
                                 <elementRef key="locus" minOccurs="0" maxOccurs="1"/>
                              </sequence>
                              <elementRef key="locus" minOccurs="1" maxOccurs="2"/>
                           </alternate>
                           <elementRef key="abstract" minOccurs="0" maxOccurs="1"/>
                           <elementRef key="langUsage" minOccurs="0" maxOccurs="1"/>
                           <elementRef key="limItem"/>
                           <elementRef key="handNotes" minOccurs="0" maxOccurs="1"/>
                        </sequence>
                        <elementRef key="catRef"/>
                     </alternate>
                  </content>
               </elementSpec>
               <!--revisionDesc-->
               <elementSpec ident="revisionDesc" mode="change" module="header">
                  <content>
                     <elementRef key="change" minOccurs="1" maxOccurs="unbounded"/>
                  </content>
                  <constraintSpec ident="revisionDescStatusMustMatch" scheme="schematron">
                     <constraint>
                        <sch:pattern>
                           <sch:rule context="tei:revisionDesc">
                              <sch:let name="firstChangeWithDocStatus" value="tei:change[@docStatus][1]"/>
                              <sch:let name="firstChangeWithMetaStatus" value="tei:change[@metaStatus][1]"/>
                              <sch:let name="docStatus" value="@docStatus"/>
                              <sch:let name="metaStatus" value="@metaStatus"/>
                              <sch:assert test="exists($firstChangeWithDocStatus) = exists($metaStatus)">
                                 ERROR: If @docStatus appears on a change element or on a revisionDesc, then both the revisionDesc element and at least one change element must feature @docStatus.  
                              </sch:assert>
                              <sch:assert test="exists($firstChangeWithMetaStatus) = exists($metaStatus)">
                                 ERROR: If @metaStatus appears on a change element or on a revisionDesc, then both the revisionDesc element and at least one change element must feature @metaStatus.  
                              </sch:assert>
                              <sch:assert test="exists($docStatus) or exists($metaStatus)">
                                 ERROR: At least one of @docStatus or @metaStatus must be present.
                              </sch:assert>
                              <sch:assert test="$docStatus = $firstChangeWithDocStatus/@docStatus">
                                 ERROR: The docStatus of the revisionDesc must match the latest change/@docStatu
                              </sch:assert>
                              <sch:assert test="$metaStatus = $firstChangeWithMetaStatus/@metaStatus">
                                 ERROR: The metaStatus of the revisionDesc must match the latest change/@metaStatus
                              </sch:assert>
                           </sch:rule>
                        </sch:pattern>
                     </constraint>
                  </constraintSpec>
                  <constraintSpec ident="revisionDescEarliest" scheme="schematron">
                     <constraint>
                        <sch:pattern>
                           <sch:rule context="tei:revisionDesc[count(tei:change[@when]) gt 1]">
                              <sch:let name="firstChange" value="tei:change[1]"/>
                              <sch:let name="secondChange" value="tei:change[2]"/>
                              <sch:let name="firstDate" value="xs:date(string-join((tokenize($firstChange/@when,'-'),'01','01')[position() lt 4],'-'))"/>
                              <sch:let name="secondDate" value="xs:date(string-join((tokenize($firstChange/@when,'-'),'01','01')[position() lt 4],'-'))"/>
                              <sch:assert test="($firstDate gt $secondDate) or ($firstDate = $secondDate)">
                                 ERROR: Change elements should be ordered reverse chronologically (latest first).
                              </sch:assert>
                           </sch:rule>
                        </sch:pattern>
                     </constraint>
                  </constraintSpec>
               </elementSpec>
               <!--textClass-->
               <elementSpec ident="textClass" module="header" mode="change">
                  <!--Add constraints to force either a correspDesc or a settingDesc-->
               </elementSpec>
            </schemaSpec>
         </div>
      </body>
   </text>
</TEI>
