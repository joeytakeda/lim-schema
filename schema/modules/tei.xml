<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="https://tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="https://tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0"
     xmlns:sch="http://purl.oclc.org/dsdl/schematron"
     xml:id="tei">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <title>LiM Schema: tei</title>
         </titleStmt>
         <publicationStmt>
            <p>See lim.odd</p>
         </publicationStmt>
         <sourceDesc>
            <p>Born Digital.</p>
         </sourceDesc>
      </fileDesc>
   </teiHeader>
   <text>
      <body>
         <div>
            <head>tei</head>
            <schemaSpec ident="lim_tei">
               <moduleRef key="tei"/>
               <!--att.anchoring-->
               <classSpec ident="att.anchoring" type="atts" module="tei" mode="change">
                  <attList>
                     <attDef ident="targetEnd" mode="delete"/>
                  </attList>
               </classSpec>
               <!--att.breaking-->
               <classSpec ident="att.breaking" type="atts" module="tei" mode="delete"/>
               <!--att.cReferencing-->
               <classSpec ident="att.cReferencing" module="tei" type="atts" mode="delete"/>
               <!--att.canonical-->
               <classSpec ident="att.canonical" type="atts" module="tei" mode="change">
                  <attList>
                     <attDef ident="key" mode="delete"/>
                  </attList>
               </classSpec>
               <!--att.damaged-->
               <classSpec ident="att.damaged" type="atts" module="tei" mode="change">
                  <attList>
                     <attDef ident="group" mode="delete"/>
                  </attList>
               </classSpec>
               <!--att.datable-->
               <classSpec ident="att.datable" module="tei" type="atts" mode="change">
                  <attList>
                     <attDef ident="period" mode="delete"/>
                  </attList>
                  
               </classSpec>
               <!--att.datable.iso-->
               <classSpec ident="att.datable.iso" module="tei" type="atts" mode="delete"/>
               <!--att.datcat-->
               <classSpec ident="att.datcat" module="tei" type="atts" mode="delete"/>
               <!--att.declarable-->
               <classSpec ident="att.declarable" module="tei" type="atts" mode="delete"/>
               <!--att.declaring-->
               <classSpec ident="att.declaring" module="tei" type="atts" mode="delete"/>
               <!--att.divLike-->
               <classSpec ident="att.divLike" module="tei" type="atts" mode="delete"/>
               <!--att.docStatus-->
               <classSpec ident="att.docStatus" module="tei" type="atts" mode="change">
                  <attList>
                     <attDef ident="status" mode="delete"/>
                     <attDef ident="docStatus" mode="add" usage="opt">
                        <desc versionDate="2010-05-06" xml:lang="en">describes the status of the transcription at the time indicated.</desc>
                        <valList type="closed" mode="add">
                           <valItem ident="empty" mode="add">
                              <desc>transcription empty</desc>
                              <gloss>empty / not yet worked on or edited</gloss>
                           </valItem>
                           <valItem ident="uneditedTranscription" mode="add">
                              <desc>Converted and unedited transcription</desc>
                              <gloss>The transcription has been converted from a word doc (or similar)
                              and has yet to be edited.</gloss>
                           </valItem>
                           <valItem ident="uneditedHTR" mode="add">
                              <desc>HTR transcription unedited</desc>
                              <gloss>transcription has not yet been edited from the conversion
                              from Transkribus</gloss>
                           </valItem>
                           <valItem ident="inProgress" mode="add">
                              <desc>transcription in progress</desc>
                              <gloss>currently being worked on, but not yet "done"</gloss>
                           </valItem>
                           <valItem ident="readyForProof" mode="add">
                              <desc>transcription ready for proof</desc>
                              <gloss>corrected and encoded, and is now ready to be proofed</gloss>
                           </valItem>
                           <valItem ident="proofed" mode="add">
                              <desc>transcription proofed</desc>
                              <gloss>proofed and checked</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                     <attDef ident="metaStatus" mode="add" usage="opt">
                        <desc versionDate="2010-05-06" xml:lang="en">describes the status of the metadata for a document at the time indicated.</desc>
                        <datatype>
                           <dataRef key="teidata.word"/>
                        </datatype>
                        <valList type="closed" mode="add">
                           <valItem ident="empty" mode="add">
                              <desc>metadata empty</desc>
                              <gloss>empty / not yet worked on or edited</gloss>
                           </valItem>
                           <valItem ident="inProgress" mode="add">
                              <desc>metadata in progress</desc>
                              <gloss>currently being worked on, but not yet "done"</gloss>
                           </valItem>
                           <valItem ident="done" mode="add">
                              <desc>metadata done</desc>
                              <gloss>Metadata work is completed</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </classSpec>
               <!--att.editLike-->
               <classSpec ident="att.editLike" module="tei" type="atts" mode="change">
                  <attList>
                     <attDef ident="instant" mode="delete"/>
                  </attList>
               </classSpec>
               <!--att.edition-->
               <classSpec ident="att.edition" module="tei" type="atts" mode="delete"/>
               <!--att.fragmentable-->
               <classSpec ident="att.fragmentable" module="tei" type="atts" mode="delete"/>
               <!--att.global-->
               <classSpec ident="att.global" module="tei" type="atts" mode="change">
                  <classes mode="change">
              <!--Remove facs and responsibility from the global modules,
                so we can add them on the individual elements that we need-->
                     <memberOf key="att.global.facs" mode="delete"/>
                     <memberOf key="att.global.responsibility" mode="delete"/>
                     <memberOf key="att.global.linking" mode="delete"/>
                     <memberOf key="att.global.analytic" mode="delete"/>
                     <memberOf key="lim.att.global.fragmentable" mode="add"/>
                  </classes>
                  <constraintSpec ident="allIdsMustBeUnique" scheme="schematron">
                     <constraint>
                        <sch:pattern>
                           
                           <sch:rule context="*[@xml:id]">
                              <sch:let name="allIds" value="//*[@xml:id]/@xml:id"/>
                              <sch:let name="myId" value="@xml:id"/>
                              
                              <sch:assert test="count($allIds[. = $myId]) = 1">ERROR: Duplicate id found <sch:value-of select="$myId"/></sch:assert>
                           </sch:rule>
                         
                        </sch:pattern>
                     </constraint>
                  </constraintSpec>
                  <attList>
              <!--We'll never need space or base, afaik-->
                     <attDef ident="xml:space" mode="delete"/>
                     <attDef ident="xml:base" mode="delete"/>
                  </attList>
                  
               </classSpec>
               <!--att.global.analytic-->
               <classSpec ident="att.global.analytic" type="atts" mode="change">
                  <constraintSpec ident="att.global.analytic.distinctValues" scheme="schematron">
                     <desc><att>ana</att> values should all be distinct</desc>
                     <constraint>
                        <sch:rule context="*[@ana]">
                           <sch:let name="values" value="tokenize(@ana,'\s+')"/>
                           <sch:let name="dups" 
                              value="for $v in $values return if (count(index-of($values, $v)) gt 1) then $v else ()"/>
                           <sch:assert test="empty($dups)">
                              ERROR: Do not repeat @ana values (duplicate values found: <sch:value-of select="string-join(distinct-values($dups),', ')"/>)
                           </sch:assert>
                        </sch:rule>
                     </constraint>
                  </constraintSpec>
                  <attList>
                     <attDef ident="ana" mode="change">
                        <datatype minOccurs="1" maxOccurs="unbounded">
                           <dataRef key="limdata.ana"/>
                        </datatype>
                     </attDef>
                  </attList>
               </classSpec>
               <!--att.global.facs-->
               <classSpec ident="att.global.facs" type="atts" mode="change">
                  <!--Restrict the use of @facs to only allow lib:-->
                  <attList>
                     <attDef ident="facs" mode="change">
                        <datatype maxOccurs="1">
                           <dataRef key="limdata.facs"/>
                        </datatype>
                     </attDef>
                  </attList>
                  <remarks>
                     <p>The facs attribute should contain only a single pointer of the limdata.facs.</p>
                  </remarks>
               </classSpec>
               <!--att.global.linking-->
               <classSpec ident="att.global.linking"
                          module="tei"
                          type="atts"
                          mode="change">
                  <attList>
                     <attDef ident="synch" mode="delete"/>
                     <attDef ident="sameAs" mode="delete"/>
                     <attDef ident="next" mode="delete"/>
                     <attDef ident="prev" mode="delete"/>
                     <attDef ident="exclude" mode="delete"/>
                     <attDef ident="select" mode="delete"/>
                  </attList>
               </classSpec>
               <!--att.global.rendition-->
               <classSpec ident="att.global.rendition"
                          module="tei"
                          type="atts"
                          mode="change">
                  <constraintSpec scheme="schematron" ident="rendition.onlyInBornDigital" mode="add">
                     <desc>Constraints for renditions that should only be used in
                     born digital documents</desc>
                     <constraint>
                        <sch:rule context="tei:*[contains-token(@rendition,'rnd:hidden')]">
                           <sch:assert test="self::tei:head and ancestor::tei:TEI/descendant::tei:catRef[matches(@target,'bornDigital')]">ERROR: rnd:hidden is meant only for born digital document headings.</sch:assert>
                        </sch:rule>
                        
                     </constraint>
                  </constraintSpec>
                  <attList>
              <!--Delete @rend, since it's too ambiguous to be useful-->
                     <attDef ident="rend" mode="delete"/>
                     <!--Delete style unless we think that's important-->
                     <attDef ident="style" mode="delete"/>
                     <!--And constraint rendition-->
                     <attDef ident="rendition" mode="change">
                        <constraintSpec ident="rendition.twoColumnNeedsLeftAndRight"
                                        scheme="schematron"
                                        mode="add">
                           <desc>The two column layout requires one item to be left and one item to be right.</desc>
                           <constraint>
                              <sch:rule context="tei:*[contains-token(@rendition,'rnd:two-column')]">
                                 <sch:let name="children" value="child::tei:*"/>
                                 <sch:let name="leftChild" value="$children[contains-token(@rendition,'rnd:left')]"/>
                                 <sch:let name="rightChild" value="$children[contains-token(@rendition, 'rnd:right')]"/>
                                 <sch:assert test="exists($children) and (count(($leftChild, $rightChild)) = count($children))">ERROR: Every child of a two column layout must have either a rnd:right or a rnd:left rendition value.</sch:assert>
                                 <sch:assert test="exists($leftChild) and exists($rightChild)">ERROR: There must be at least one rnd:left and one rnd:right child</sch:assert>
                              </sch:rule>
                           </constraint>
                        </constraintSpec>
                        <constraintSpec ident="rendition.mutualExclusion" scheme="schematron" mode="add">
                           <desc>Some renditions contradict each other</desc>
                           <constraint>
                              <sch:rule context="tei:*[@rendition]">
                                 <sch:let name="rendition" value="@rendition"/>
                                 <sch:let name="ptrs" value="tokenize(@rendition,'\s+')"/>
                                 <sch:let name="tokens" value="for $p in $ptrs return substring-after($p,'rnd:')"/>
                                 <sch:let name="duplicates" value="$tokens[count(index-of($tokens, .)) gt 1]"/>
                                 <sch:assert test="empty($duplicates)">ERROR: Duplicate renditions found: <sch:value-of select="string-join($duplicates,', ')"/>. Do not use the same rendition more than once on a single element.</sch:assert>
                                 <sch:assert test="count($tokens[. = ('left','right','center')]) lt 2">ERROR: rnd:right, rnd:left, or rnd:center are mutually exclusive.</sch:assert>
                                 <sch:assert test="count($tokens[. = ('large','small')]) lt 2">ERROR: rnd:large and rnd:small are mutually exclusive.</sch:assert>
                                 <sch:assert test="count($tokens[. = ('bordered-bottom','bordered-bottom-dashed')]) lt 2">ERROR: rnd:bordered-bottom and rnd:bordered-bottom-dashed are mutually exclusive.</sch:assert>
                              </sch:rule>
                           </constraint>
                        </constraintSpec>
                        <valList type="closed" mode="add">
                           <!--Auto-filled by XSLT: ${pd}/code/schema/fill_odd.xsl -->
                        </valList>
                     </attDef>
                  </attList>
               </classSpec>
               <!--att.naming-->
               <classSpec ident="att.naming" module="tei" type="atts" mode="change">
                  <attList>
                     <attDef ident="nymRef" mode="delete"/>
                  </attList>
               </classSpec>
               <!--att.notated-->
               <classSpec ident="att.notated" module="tei" type="atts" mode="delete"/>
               <!--att.personal-->
               <classSpec ident="att.personal" module="tei" type="atts" mode="change">
                  <attList>
                     <attDef ident="full" mode="delete"/>
                     <attDef ident="sort" mode="delete"/>
                  </attList>
               </classSpec>
               <!--att.placement-->
               <classSpec ident="att.placement" module="tei" type="atts" mode="change">
                  <attList>
                     <attDef ident="place" mode="change">
                        <datatype>
                           <dataRef key="limdata.placement"/>
                        </datatype>
                        <valList mode="delete"/>
                     </attDef>
                  </attList>
               </classSpec>
               <!--att.pointing-->
               <classSpec ident="att.pointing" module="tei" type="atts" mode="change">
                  <attList>
                     <attDef ident="targetLang" mode="delete"/>
                     <attDef ident="evaluate" mode="delete"/>
                  </attList>
               </classSpec>
               <!--att.pointing.group-->
               <classSpec ident="att.pointing.group"
                          mode="delete"
                          module="tei"
                          type="atts"/>
               <!--att.segLike-->
               <classSpec ident="att.segLike" module="tei" mode="change" type="atts">
                  <attList>
                     <attDef ident="function" mode="delete"/>
                  </attList>
               </classSpec>
               <!--att.sortable-->
               <classSpec ident="att.sortable" module="tei" type="atts" mode="delete"/>
               <!--att.timed-->
               <classSpec ident="att.timed" module="tei" type="atts" mode="delete"/>
               <!--att.transcriptional-->
               <classSpec ident="att.transcriptional"
                          module="tei"
                          type="atts"
                          mode="delete"/>
               <!--att.typed-->
               <classSpec ident="att.typed" module="tei" type="atts" mode="change">
                  <attList>
              <!--Remove subtype for now-->
                     <attDef ident="subtype" mode="delete"/>
                  </attList>
               </classSpec>
               <!--att.written-->
               <classSpec ident="att.written" 
                  module="tei" type="atts" mode="change">
                  <constraintSpec ident="hand.mustUseLocalPointer"
                     mode="add" scheme="schematron">
                     <desc>All <att>hand</att> attributes should point 
                        to a locally defined hand.</desc>
                     <constraint>
                        <sch:rule context="tei:*[@hand]">
                           <sch:let name="hand" value="@hand"/>
                           <sch:let name="ptrs" value="tokenize($hand,'\s+')"/>
                           <sch:let name="handNotes"
                              value="ancestor::tei:TEI//tei:handNote"/>
                           <sch:let name="unmatched" 
                              value="for $p in $ptrs
                              return 
                                 if 
                                 ($handNotes[@xml:id = substring-after($p,'#')])
                                    then () 
                                 else $p"/>
                           <sch:assert test="every $p in $ptrs satisfies starts-with($p,'#')">ERROR: All @hand values must start with a # to point to a locally defined handNote.</sch:assert>
                           <sch:assert test="empty($unmatched)">ERROR: Cannot find associated handNotes for <sch:value-of select="string-join($unmatched, ' ')"/></sch:assert>
                        </sch:rule>
                     </constraint>
                  </constraintSpec>
               </classSpec>
               <!--teidata.language-->
               <dataSpec module="tei" ident="teidata.language" mode="change">
                  <content>
                     <alternate>
                        <dataRef name="language"/>
                        <!--Add the subset of languages we know we might use
                  so far-->
                        <valList mode="add" type="semi">
                           <valItem ident="la">
                              <desc>la</desc>
                              <gloss>Latin</gloss>
                           </valItem>
                           <valItem ident="en">
                              <desc>en</desc>
                              <gloss>English</gloss>
                           </valItem>
                           <valItem ident="fr">
                              <desc>fr</desc>
                              <gloss>French</gloss>
                           </valItem>
                           <valItem ident="gr">
                              <desc>gr</desc>
                              <gloss>Greek</gloss>
                           </valItem>
                           <valItem ident="ga">
                              <desc>ga</desc>
                              <gloss>Irish</gloss>
                           </valItem>
                           <valItem ident="gd">
                              <desc>gd</desc>
                              <gloss>Scottish Gaelic</gloss>
                           </valItem>
                           <valItem ident="de">
                              <desc>de</desc>
                              <gloss>German</gloss>
                           </valItem>
                           <valItem ident="es">
                              <desc>es</desc>
                              <gloss>Spanish</gloss>
                           </valItem>
                           <valItem ident="sco">
                              <desc>sco</desc>
                              <gloss>Scots</gloss>
                           </valItem>
                           <valItem ident="ghc">
                              <desc>ghc</desc>
                              <gloss>Hiberno-Scottish Gaelic</gloss>
                           </valItem>
                           <valItem ident="it">
                              <desc>it</desc>
                              <gloss>Italian</gloss>
                           </valItem>
                        </valList>
                     </alternate>
                  </content>
               </dataSpec>
            </schemaSpec>
         </div>
      </body>
   </text>
</TEI>
