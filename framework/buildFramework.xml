<project default="all" basedir="../" name="buildFramework">
   
   
   <path id="frameworkFiles">
      <first>
         <fileset dir="${basedir}">
            <include name="*.framework"/>
         </fileset>
      </first>
   </path>
   
   <pathconvert property="frameworkFile" refid="frameworkFiles"/>
   
   <basename property="frameworkName" file="${frameworkFile}" suffix=".framework"/>
   <property name="lib.dir" value="${basedir}/lib"/>
   
   <fileset id="assets" dir="${basedir}">
      <include name="css/**"/>
      <include name="schema/**"/>
      <include name="templates/**"/>
      <include name="**.framework"/>
   </fileset>
   
   
   
   <property name="distDir" value="${basedir}/dist"/>
   <property name="frameworkDistDir" value="${distDir}/${frameworkName}"/>
   
  
   
   <target name="init">
      <delete dir="${distDir}"/>
      <mkdir dir="${frameworkDistDir}"/>
   </target>
   
   <target name="copyAssets">
      <copy todir="${frameworkDistDir}">
         <fileset refid="assets"/>
      </copy>
   </target>
   
   <target name="makeUpdate">
      <java jar="${lib.dir}/saxon-he-10.jar" fork="true">
         <arg line="-xsl:${basedir}/framework/create_update_site.xsl"/>
         <arg line="-s:${basedir}/framework/updateSite.xml"/>
         <arg line="-o:${distDir}/updateSite.xml"/>
         <arg line="framework=${frameworkName}"/>
      </java>
   </target>
   
   <target name="zip">
      <loadfile property="distVersion" srcfile="${distDir}/VERSION"/>
      <zip basedir="${distDir}" destfile="${distDir}/${frameworkName}-${distVersion}.zip" >
         <include name="${frameworkName}/**"/>
      </zip>
   </target>
   
   <target name="flatten">
      <description>create a flattened version of the assets for dist.</description>
      <copy todir="${distDir}" includeemptydirs="false">
         <fileset dir="${basedir}">
            <include name="**.framework"/>
            <include name="schema/**.rng"/>
         </fileset>
         <flattenmapper/>
      </copy>
   </target>
   
   <target name="dist" depends="copyAssets, makeUpdate, zip, flatten"/>
   
   <target name="clean">
      <delete dir="dist/${frameworkName}"/>
   </target>
   
   <target name="all" depends="init, dist, clean"/>
   
</project>